import math
import matplotlib.pyplot as plt
import random

# Constants
vin = 5.0  # Voltage in
out_high = 3.3  # Voltage output from pin 3 when "high"
out_low = 0.25  # Voltage output from pin 3 when "low"
farads = 2e-6  # Capacitance of primary capacitor in farads
ohms = 1e6  # Resistance in ohms of the primary resistor
sim_time = 3  # Simulation time in seconds
step = sim_time / 1000  # Time increment for each simulation step in seconds
button_start_time = 0.5  # Time to fire off the timer in seconds
button_hold_time = 0.5  # Button press duration in seconds
bounce_time = 0.07  # Switch bounce simulation time in seconds
bounce_prob = 0.33  # Chance of switch bounce open during each step
unbounce_prob = 0.5  # Chance of a bounced switch re-closing during a step

# Ensure bounce time does not exceed button hold time
bounce_time = min(bounce_time, button_hold_time)

# Functions
def update_latch(latch, trigger, threshold, vin):
    if trigger < vin / 3:
        latch = True
    if threshold > vin * 2 / 3:
        latch = False
    return latch

def update_capacitor(cap, farads, ohms, vin, latch, step):
    if latch:
        # Charging
        tc = farads * ohms  # Time constant
        tp = step / tc
        pc = 1 - math.exp(-tp)
        cap += (vin - cap) * pc
    else:
        # Discharging
        cap = 0
    return cap

# Simulation setup
trigger = vin
latch = False
vout = out_low
cap = 0
pre_trigger_steps = round(button_start_time / step)
trigger_list = [trigger] * pre_trigger_steps
cap_list = [cap] * pre_trigger_steps
out_list = [vout] * pre_trigger_steps
time_list = [i * step for i in range(pre_trigger_steps)]
time = button_start_time

# Seed for bounce randomness
random.seed(8675309)

# Simulation loop
button_time = 0
while time < sim_time:
    latch = update_latch(latch, trigger, cap, vin)
    cap = update_capacitor(cap, farads, ohms, vin, latch, step)
    vout = out_high if latch else out_low
    trigger_list.append(trigger)
    cap_list.append(cap)
    out_list.append(vout)
    time_list.append(time)
    time += step
    button_time += step
    
    # Bounce simulation
    if button_time <= bounce_time:
        r = random.random()
        if trigger == 0 and r < bounce_prob:
            trigger = vin
        elif trigger != 0 and r < unbounce_prob:
            trigger = 0
    else:
        trigger = vin if button_time > button_hold_time else 0

# Print constants
print(f'Capacitor: {farads * 1e6}µF')
print(f'Resistor: {ohms / 1e3}KΩ')
print(f'Vcc: +{vin}V\n')

# Print timing info
time_high = round(1.1 * ohms * farads, 2)
print(f'Time high: {time_high * 1e3}ms')
print(f'Periods simulated: {len(time_list)}')
print(f'Bounce time: {bounce_time * 1e3}ms\n')

# Plotting
plt.plot(time_list, trigger_list, linewidth=0.7, label='Trigger (Pin 2)')
plt.plot(time_list, out_list, label='Output (Pin 3)')
plt.plot(time_list, cap_list, label='Capacitor')
plt.xlabel('Time (Seconds)')
plt.ylabel('Volts')
plt.ylim(-vin * 0.1, vin * 1.1)
plt.legend(loc='upper right')
plt.show()
