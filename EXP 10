import sympy as sy
import matplotlib.pylab as p 
import scipy.signal as sp
s = sy.symbols('s')
# highpass filter circuit
def highpass(R1, R3, C1, C2, G, Vi):
A = sy.Matrix([[0, 0, 1, -1/G], [-R3*C2*s/(1+R3*C2*s), 1, 0, 0], [0, -G, G, 1], [(C1*s + 
C2*s + 1/R1), -C2*s, 0, -1/R1]])
b = sy.Matrix([0, 0, 0, Vi*s*C1])
V = A.inv() * b 
return A, b, V
# converts a sympy transfer function to a scipy.signal.lti object 
def convertSympyToLTI(H):
# fraction function: Returns a pair with expressionâ€™s numerator and denominator. 
n, d = sy.fraction(H)
# convert those to polynomials 
polynum = sy.poly(n)
polyden = sy.poly(d)
# get arrays for their coefficients 
numCoeff = polynum.all_coeffs() 
denCoeff = polyden.all_coeffs()
# feed the coefficient arrays into sp.lti to get an lti system object with the transfer funciton
H
H_lti = sp.lti(p.array(numCoeff, dtype=float), p.array(denCoeff, dtype=float)) 
return H_lti
def highpassAnalysis():
# first of all show the magnitude plot
A,b,V = highpass(10000,10000,1e-9,1e-9,1.586,1) 
Vo = V[3]
print(Vo)
w = p.logspace(0,8,801) 
ss = complex(0, 1)*w
hf = sy.lambdify(s, Vo, 'numpy') 
v = hf(ss)
p.loglog(w,abs(v),lw=2) 
p.title("Magnitude plot of highpass filter") 
p.ylabel("$|H(j\\omega)|\\rightarrow$")
p.xlabel("$\\omega$(in rad/s)$\\rightarrow$") 
p.grid(True)
p.show()
# Q3, Q4, Q5
highpassAnalysis(
