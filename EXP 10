import sympy as sy
import matplotlib.pylab as plt
import scipy.signal as sp

# Define the Laplace variable
s = sy.symbols('s')

# Highpass filter circuit
def highpass(R1, R3, C1, C2, G, Vi):
    A = sy.Matrix([[0, 0, 1, -1/G], [-R3*C2*s/(1+R3*C2*s), 1, 0, 0], [0, -G, G, 1], [(C1*s + C2*s + 1/R1), -C2*s, 0, -1/R1]])
    b = sy.Matrix([0, 0, 0, Vi*s*C1])
    V = A.inv() * b
    return A, b, V

# Converts a sympy transfer function to a scipy.signal.lti object
def convertSympyToLTI(H):
    n, d = sy.fraction(H)  # Returns a pair with expressionâ€™s numerator and denominator
    polynum = sy.poly(n)   # Convert those to polynomials
    polyden = sy.poly(d)
    numCoeff = polynum.all_coeffs()  # Get arrays for their coefficients
    denCoeff = polyden.all_coeffs()
    H_lti = sp.lti([float(i) for i in numCoeff], [float(i) for i in denCoeff])  # Feed the coefficient arrays into sp.lti
    return H_lti

# Analysis of the highpass filter
def highpassAnalysis():
    A, b, V = highpass(10000, 10000, 1e-9, 1e-9, 1.586, 1)
    Vo = V[3]
    print("Transfer Function Vo(s):", Vo)
    w = plt.logspace(0, 8, 801)
    ss = complex(0, 1)*w
    hf = sy.lambdify(s, Vo, 'numpy')
    v = hf(ss)
    plt.loglog(w, abs(v), lw=2)
    plt.title("Magnitude plot of highpass filter")
    plt.ylabel("$|H(j\\omega)|\\rightarrow$")
    plt.xlabel("$\\omega$(in rad/s)$\\rightarrow$")
    plt.grid(True)
    plt.show()

# Call the analysis function
highpassAnalysis()
